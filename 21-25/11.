

Problem Link : https://leetcode.com/problems/construct-quad-tree/

/*
// Definition for a QuadTree node.
class Node {
public:
    bool val;
    bool isLeaf;
    Node* topLeft;
    Node* topRight;
    Node* bottomLeft;
    Node* bottomRight;
    
    Node() {
        val = false;
        isLeaf = false;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = NULL;
        topRight = NULL;
        bottomLeft = NULL;
        bottomRight = NULL;
    }
    
    Node(bool _val, bool _isLeaf, Node* _topLeft, Node* _topRight, Node* _bottomLeft, Node* _bottomRight) {
        val = _val;
        isLeaf = _isLeaf;
        topLeft = _topLeft;
        topRight = _topRight;
        bottomLeft = _bottomLeft;
        bottomRight = _bottomRight;
    }
};
*/

class Solution {
public:
    Node* solve(int x1,int y1,int x2,int y2,vector<vector<int>>& grid){
        if(x1>x2 || y1>y2) return NULL;
        bool c1=false,c2=false;
        for(int i=x1;i<=x2;i++){
            for(int j=y1;j<=y2;j++){
                if(grid[i][j]==1) c1=true;
                if(grid[i][j]==0) c2=true;
            }
        }
        Node *root=new Node();
        if(c1 && c2){
            root->isLeaf=false;
            root->val=true;
            int cx=(x1+x2)/2,cy=(y1+y2)/2;
            root->topLeft=solve(x1,y1,cx,cy,grid);
            root->topRight=solve(x1,cy+1,cx,y2,grid);
            root->bottomLeft=solve(cx+1,y1,x2,cy,grid);
            root->bottomRight=solve(cx+1,cy+1,x2,y2,grid);
        }
        else{
            root->isLeaf=true;
            root->val=c1;
        }
        return root;
    }
    Node* construct(vector<vector<int>>& grid) {
        int n=grid.size();
        return solve(0,0,n-1,n-1,grid);
    }
};
