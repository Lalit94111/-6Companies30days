

Problem Link : https://leetcode.com/problems/minimum-swaps-to-arrange-a-binary-grid/

class Solution {
public:
    int solve(vector<int>& v){
        int n=v.size();
        int cnt=0;
        for(int i=n-1;i>=0;i--){
            if(v[i]==0) cnt++;
            else break;
        }
        return cnt;
    }
    int find(vector<int>& v){
        int n=v.size(),cnt=0;
        for(int i=0;i<n;i++){
            if(v[i]>=n-i-1) continue;
            int j=i;
            while(v[j]<n-i-1) j++;
            while(j>i){
                swap(v[j],v[j-1]);
                cnt++;
                j--;
            }
        }
        return cnt;
    }
    int minSwaps(vector<vector<int>>& grid) {
        int n=grid.size();
        vector<int> right_0(n);
        for(int i=0;i<n;i++) right_0[i]=solve(grid[i]);
        vector<int> temp=right_0;
        sort(temp.begin(),temp.end());
        for(int i=n-1;i>=1;i--){
            if(temp[i]<i) return -1;
        }
        return find(right_0);
    }
};
