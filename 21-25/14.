

Problem Link : https://leetcode.com/problems/as-far-from-land-as-possible/

#define vvi vector<vector<int>>
class Solution {
public:
    int dx[4]={-1,0,1,0};
    int dy[4]={0,1,0,-1};
    void bfs(queue<vector<int>>& q,vvi& vis,vvi& grid){
        int n=grid.size();
        while(!q.empty()){
            vector<int> temp=q.front();
            q.pop();
            
            int x=temp[0],y=temp[1];
            for(int i=0;i<4;i++){
                int nx=x+dx[i],ny=y+dy[i];
                if(nx>=0 && nx<n && ny>=0 && ny<n){
                    if(grid[nx][ny]==0 && vis[nx][ny]==0){
                        vis[nx][ny]=vis[x][y]+1;
                        q.push({nx,ny});
                    }
                }
            }
        }
    }
    int maxDistance(vector<vector<int>>& grid) {
        int n=grid.size();
        vvi vis(n,vector<int>(n,0));
        
        queue<vector<int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    q.push({i,j});
                } 
            }
        }
        bfs(q,vis,grid);
        int ans=-1;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==0 && vis[i][j]) ans=max(ans,vis[i][j]);
            }
        }
        return ans;
    }
};
