

Problem Link : https://leetcode.com/problems/pacific-atlantic-water-flow/

#define vvi vector<vector<int>>
#define vi vector<int>
class Solution {
public:
    int dx[4]={-1,0,1,0};
    int dy[4]={0,1,0,-1};
    void dfs(int x,int y,vvi& vis,vvi& h){
        int n=h.size(),m=h[0].size();
        vis[x][y]=1;
        for(int i=0;i<4;i++){
            int nx=x+dx[i],ny=y+dy[i];
            if(nx>=0 && nx<n && ny>=0 && ny<m && vis[nx][ny]==0 && h[nx][ny]>=h[x][y]){
                dfs(nx,ny,vis,h);
            }
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& h) {
        int n=h.size(),m=h[0].size();
        vvi p(n,vi(m,0)),a(n,vi(m,0));
        for(int i=0;i<n;i++){
            dfs(i,0,p,h);
            dfs(i,m-1,a,h);
        }
        for(int j=0;j<m;j++){
            dfs(0,j,p,h);
            dfs(n-1,j,a,h);
        }
        vvi ans;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(p[i][j] && a[i][j]) ans.push_back({i,j});
            }
        }
        return ans;
    }
};

/*
class Solution {
public:
    int dx[4]={-1,0,1,0};
    int dy[4]={0,1,0,-1};
    void bfs(queue<pair<int,int>>& q,vector<vector<int>>& vis,vector<vector<int>>& h){
        int n=h.size(),m=h[0].size();
        while(!q.empty()){
            pair<int,int> t=q.front();
            q.pop();
            
            int x=t.first,y=t.second;
            for(int i=0;i<4;i++){
                int nx=x+dx[i],ny=y+dy[i];
                if(nx<0 || nx>=n || ny<0 || ny>=m || vis[nx][ny] || h[nx][ny]<h[x][y]) continue;
                vis[nx][ny]=1;
                q.push({nx,ny});
            }
        }
    }
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& h) {
        int n=h.size(),m=h[0].size();
        queue<pair<int,int>> pac,atl;
        vector<vector<int>> pacVis(n,vector<int>(m,0)),atlVis(n,vector<int>(m,0));
        
        for(int i=0;i<n;i++){
            pac.push({i,0});
            atl.push({i,m-1});
            pacVis[i][0]=1;
            atlVis[i][m-1]=1;
        }
        
        for(int j=0;j<m;j++){
            pac.push({0,j});
            atl.push({n-1,j});
            pacVis[0][j]=1;
            atlVis[n-1][j]=1;
        }
        bfs(pac,pacVis,h);
        bfs(atl,atlVis,h);
        vector<vector<int>> ans;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(pacVis[i][j] && atlVis[i][j]) ans.push_back({i,j});
            }
        }
        return ans;
    }
};
*/
