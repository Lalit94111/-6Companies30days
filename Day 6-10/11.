

Problem Link : https://practice.geeksforgeeks.org/problems/serialize-and-deserialize-a-binary-tree/1

class Solution
{
    public:
    void dfs(Node *root,vector<int>& ans){
        if(root==NULL){
            ans.push_back(-1);
            return;
        }
        ans.push_back(root->data);
        dfs(root->left,ans);
        dfs(root->right,ans);
    }
    //Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) 
    {
        vector<int> ans;
        dfs(root,ans);
        return ans;
    }
    
    Node *fun(vector<int>& a){
        if(a.back()==-1) {
            a.pop_back();
            return NULL;
        }
        Node *root=new Node(a.back());
        a.pop_back();
        root->left=fun(a);
        root->right=fun(a);
        return root;
    }
    //Function to deserialize a list and construct the tree.
    Node * deSerialize(vector<int> &A)
    {
       reverse(A.begin(),A.end());
       return fun(A);
    }

};
